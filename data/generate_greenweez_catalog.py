"""
ðŸŒ± GÃ‰NÃ‰RATEUR DE CATALOGUE PRODUITS BIO GREENWEEZ
===============================================
Transforme les IDs en noms de produits bio rÃ©alistes
Pour un dashboard e-commerce crÃ©dible et professionnel
"""

import pandas as pd
import random
import numpy as np

def generate_greenweez_catalog():
    """GÃ©nÃ¨re un catalogue de produits bio Greenweez rÃ©alistes"""

    print("ðŸŒ± GÃ©nÃ©ration du catalogue Greenweez Bio...")

    # CatÃ©gories de produits bio Greenweez
    bio_categories = {
        'Fruits & LÃ©gumes': [
            'Pommes bio Gala', 'Bananes bio Ã©quitables', 'Carottes bio Provence',
            'Tomates cerises bio', 'Avocat bio PÃ©rou', 'Citrons bio Sicile',
            'Ã‰pinards bio franÃ§ais', 'Courgettes bio locales', 'Brocolis bio',
            'Pommes de terre bio Normandie', 'Oignons bio France', 'Ail bio DrÃ´me'
        ],
        'Ã‰picerie Bio': [
            'Quinoa bio tricolore', 'Riz basmati bio Inde', 'PÃ¢tes complÃ¨tes bio',
            'Lentilles corail bio', 'Flocons avoine bio', 'Huile olive bio Provence',
            'Vinaigre balsamique bio', 'Miel acacia bio France', 'Sucre coco bio',
            'Farine Ã©peautre bio', 'Graines de chia bio', 'Amandes bio Espagne'
        ],
        'Boissons Bio': [
            'Jus pomme bio 1L', 'ThÃ© vert bio Sencha', 'CafÃ© arabica bio Ã©quitable',
            'Eau de coco bio', 'Tisane camomille bio', 'Kombucha gingembre bio',
            'Lait avoine bio Oatly', 'Smoothie aÃ§aÃ¯ bio', 'ThÃ© chai bio Ã©pices',
            'Jus orange bio pressÃ©', 'Infusion dÃ©tox bio', 'Matcha bio premium'
        ],
        'CosmÃ©tiques Bio': [
            'Shampoing bio karitÃ©', 'Savon bio olive Marseille', 'CrÃ¨me visage bio aloe',
            'Huile argan bio Maroc', 'Dentifrice bio menthe', 'DÃ©odorant bio palmarosa',
            'Gel douche bio lavande', 'Masque argile bio', 'SÃ©rum anti-Ã¢ge bio',
            'Baume lÃ¨vres bio cire abeille', 'Lotion tonique bio rose', 'CrÃ¨me mains bio'
        ],
        'BÃ©bÃ© & Enfant Bio': [
            'Compote pomme bio bÃ©bÃ©', 'Couches Ã©colo T3', 'Lingettes bio calendula',
            'Lait infantile bio', 'Petit pot lÃ©gumes bio', 'Biscuits bÃ©bÃ© bio',
            'Gel lavant bio enfant', 'CrÃ¨me change bio', 'CÃ©rÃ©ales bÃ©bÃ© bio',
            'PurÃ©e fruits bio pot', 'Huile massage bÃ©bÃ© bio', 'Pommade bio calendula'
        ],
        'ComplÃ©ments Bio': [
            'Spiruline bio comprimÃ©s', 'Vitamine D3 bio', 'Probiotiques bio gÃ©lules',
            'MagnÃ©sium marin bio', 'GelÃ©e royale bio', 'Propolis bio spray',
            'Omega 3 bio algues', 'Curcuma bio pipÃ©rine', 'Ginseng bio tonus',
            'Chlorella bio dÃ©tox', 'AcÃ©rola bio vitamine C', 'Rhodiola bio stress'
        ]
    }

    # Charger les donnÃ©es actuelles
    products_df = pd.read_csv('cleaned_datasets/products_cleaned.csv')
    sales_df = pd.read_csv('cleaned_datasets/sales_cleaned.csv')

    # RÃ©cupÃ©rer tous les IDs produits vendus
    sold_product_ids = sales_df['pdt_id'].unique()

    # GÃ©nÃ©rer des noms pour chaque ID
    catalog_enriched = []

    for product_id in sold_product_ids:
        # Choisir une catÃ©gorie alÃ©atoire
        category = random.choice(list(bio_categories.keys()))
        product_names = bio_categories[category]

        # Choisir un nom de produit
        base_name = random.choice(product_names)

        # Ajouter de la variÃ©tÃ© avec des variants
        variants = ['', ' 500g', ' 250g', ' 1kg', ' pack de 6', ' format familial', ' premium']
        variant = random.choice(variants)

        product_name = base_name + variant

        # Prix cohÃ©rent avec le type de produit et Greenweez
        if 'Fruits & LÃ©gumes' in category:
            price_base = random.uniform(2.5, 8.9)
        elif 'CosmÃ©tiques Bio' in category:
            price_base = random.uniform(5.9, 24.9)
        elif 'ComplÃ©ments Bio' in category:
            price_base = random.uniform(12.9, 39.9)
        elif 'Boissons Bio' in category:
            price_base = random.uniform(2.9, 15.9)
        else:
            price_base = random.uniform(3.9, 18.9)

        catalog_enriched.append({
            'product_id': product_id,
            'product_name': product_name,
            'category': category,
            'price_catalog': round(price_base, 2),
            'brand': 'Greenweez' if random.random() > 0.7 else random.choice([
                'Biocoop', 'Naturalia', 'La Vie Claire', 'Bjorg', 'LÃ©a Nature', 'Weleda'
            ])
        })

    # CrÃ©er le DataFrame enrichi
    catalog_df = pd.DataFrame(catalog_enriched)

    # Fusionner avec les donnÃ©es produits existantes
    enriched_products = products_df.merge(
        catalog_df,
        left_on='products_id',
        right_on='product_id',
        how='left'
    )

    # Sauvegarder le catalogue enrichi
    enriched_products.to_csv('cleaned_datasets/products_greenweez.csv', index=False)
    catalog_df.to_csv('cleaned_datasets/catalog_greenweez.csv', index=False)

    print(f"âœ… Catalogue crÃ©Ã©: {len(catalog_df)} produits bio nommÃ©s")
    print(f"ðŸ“Š RÃ©partition par catÃ©gorie:")
    category_counts = catalog_df['category'].value_counts()
    for cat, count in category_counts.items():
        print(f"  â€¢ {cat}: {count} produits")

    print(f"ðŸ“¦ Marques prÃ©sentes:")
    brand_counts = catalog_df['brand'].value_counts()
    for brand, count in brand_counts.head().items():
        print(f"  â€¢ {brand}: {count} produits")

    # Ã‰chantillon final
    print("\\nðŸŒ± Ã‰CHANTILLON CATALOGUE:")
    sample = catalog_df.sample(10)
    for _, row in sample.iterrows():
        print(f"  â€¢ {row['product_name']} - {row['category']} - {row['price_catalog']}â‚¬ - {row['brand']}")

    return catalog_df, enriched_products

if __name__ == "__main__":
    generate_greenweez_catalog()
